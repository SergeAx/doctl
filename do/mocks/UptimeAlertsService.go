// Code generated by MockGen. DO NOT EDIT.
// Source: ./do/uptime_alerts.go
//
// Generated by this command:
//
//	mockgen.exe -source ./do/uptime_alerts.go -package=mocks UptimeAlertsService
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	do "github.com/digitalocean/doctl/do"
	godo "github.com/digitalocean/godo"
	gomock "go.uber.org/mock/gomock"
)

// MockUptimeAlertsService is a mock of UptimeAlertsService interface.
type MockUptimeAlertsService struct {
	ctrl     *gomock.Controller
	recorder *MockUptimeAlertsServiceMockRecorder
}

// MockUptimeAlertsServiceMockRecorder is the mock recorder for MockUptimeAlertsService.
type MockUptimeAlertsServiceMockRecorder struct {
	mock *MockUptimeAlertsService
}

// NewMockUptimeAlertsService creates a new mock instance.
func NewMockUptimeAlertsService(ctrl *gomock.Controller) *MockUptimeAlertsService {
	mock := &MockUptimeAlertsService{ctrl: ctrl}
	mock.recorder = &MockUptimeAlertsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUptimeAlertsService) EXPECT() *MockUptimeAlertsServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUptimeAlertsService) Create(arg0 string, arg1 *godo.CreateUptimeAlertRequest) (*do.UptimeAlert, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*do.UptimeAlert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUptimeAlertsServiceMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUptimeAlertsService)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockUptimeAlertsService) Delete(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUptimeAlertsServiceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUptimeAlertsService)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockUptimeAlertsService) Get(arg0, arg1 string) (*do.UptimeAlert, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*do.UptimeAlert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUptimeAlertsServiceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUptimeAlertsService)(nil).Get), arg0, arg1)
}

// GetState mocks base method.
func (m *MockUptimeAlertsService) GetState(arg0 string) (*do.UptimeCheckState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState", arg0)
	ret0, _ := ret[0].(*do.UptimeCheckState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetState indicates an expected call of GetState.
func (mr *MockUptimeAlertsServiceMockRecorder) GetState(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockUptimeAlertsService)(nil).GetState), arg0)
}

// List mocks base method.
func (m *MockUptimeAlertsService) List(arg0 string) ([]do.UptimeAlert, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]do.UptimeAlert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockUptimeAlertsServiceMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockUptimeAlertsService)(nil).List), arg0)
}

// Update mocks base method.
func (m *MockUptimeAlertsService) Update(arg0, arg1 string, arg2 *godo.UpdateUptimeAlertRequest) (*do.UptimeAlert, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*do.UptimeAlert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockUptimeAlertsServiceMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUptimeAlertsService)(nil).Update), arg0, arg1, arg2)
}
